sim.fit.LMM <- function(nCluster,nSubPerClust,sd.vec,beta.vec,times)
{
## create number of time points, number of observations, number of subjects total;
nTimes         = length(times);
nObsPerDataset = nCluster*nSubPerClust*nTimes;
nSubPerDataset = nCluster*nSubPerClust;
## generate covariate data;
int     = cbind(rep(1,nObsPerDataset))
time    = cbind(rep(times,nSubPerDataset))
trt     = cbind(c(rep(1,nObsPerDataset/2),rep(0,nObsPerDataset/2)))
trtTime = cbind(time*trt);
x       = cbind(int,time,trtTime)
## compute linear predictor (i.e., population mean);
linPred = x%*%beta.vec;
## generate cluster/subject IDs;
h = cbind(sort(rep(1:nCluster,nObsPerDataset/nCluster)));
b = cbind(sort(rep(1:nSubPerDataset,nTimes)))
## simulate random effects;
hr = rnorm(nCluster,mean=0,sd=sd.vec[1]);
hr = cbind(hr[h]);
br = rnorm(nSubPerDataset,mean=0,sd=sd.vec[2]);
br = cbind(br[b]);
er = cbind(rnorm(nObsPerDataset,mean=0,sd=sd.vec[3]));
## construct outcomes;
y = linPred + hr + br + er;
## fit model;
fit.sim <- lmer(y~time+trtTime+(1|h)+(1|b))
return(fit.sim);
}
power.analysis <- function(nSims,nCluster,nSubPerClust,sd.vec,beta0,beta1,beta2.vec,times)
{
results = matrix(NA,nrow=length(beta2.vec)*nSims,ncol=8);
i=0;
for (beta2 in beta2.vec)
{
for (sim in (1:nSims))
{
i=i+1;
res<- sim.fit.LMM(nCluster,nSubPerClust,sd.vec,c(beta0,beta1,beta2),times)
results[i,] <- c(beta2,coef(summary(res))[,1],c(as.data.frame(VarCorr(res))$sdcor),(coef(summary(res))[, 5][3]<0.05))
}
}
return(results);
}
results <- as.data.frame(power.analysis(nSims=50,nCluster=5,nSubPerClust=50,sd.vec=c(10,10,10),beta0=10,beta1=1,beta2.vec=c(seq(0,1,by=0.2)),times=c(seq(0,12,by=6))))
colnames(results) <- c("trueBeta2","estBeta0","estBeta1","estBeta1","cluster.sd","subject.sd","error.sd","rejectNull")
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
#pdf(file = "<need to put a path here>/<need to put a filename here>.pdf",
#    width = 6,
#    height = 4)
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
#dev.off()
require(lme4);
require(lmerTest);
sim.fit.LMM <- function(nCluster,nSubPerClust,sd.vec,beta.vec,times)
{
## create number of time points, number of observations, number of subjects total;
nTimes         = length(times);
nObsPerDataset = nCluster*nSubPerClust*nTimes;
nSubPerDataset = nCluster*nSubPerClust;
## generate covariate data;
int     = cbind(rep(1,nObsPerDataset))
time    = cbind(rep(times,nSubPerDataset))
trt     = cbind(c(rep(1,nObsPerDataset/2),rep(0,nObsPerDataset/2)))
trtTime = cbind(time*trt);
x       = cbind(int,time,trtTime)
## compute linear predictor (i.e., population mean);
linPred = x%*%beta.vec;
## generate cluster/subject IDs;
h = cbind(sort(rep(1:nCluster,nObsPerDataset/nCluster)));
b = cbind(sort(rep(1:nSubPerDataset,nTimes)))
## simulate random effects;
hr = rnorm(nCluster,mean=0,sd=sd.vec[1]);
hr = cbind(hr[h]);
br = rnorm(nSubPerDataset,mean=0,sd=sd.vec[2]);
br = cbind(br[b]);
er = cbind(rnorm(nObsPerDataset,mean=0,sd=sd.vec[3]));
## construct outcomes;
y = linPred + hr + br + er;
## fit model;
fit.sim <- lmer(y~time+trtTime+(1|h)+(1|b))
return(fit.sim);
}
power.analysis <- function(nSims,nCluster,nSubPerClust,sd.vec,beta0,beta1,beta2.vec,times)
{
results = matrix(NA,nrow=length(beta2.vec)*nSims,ncol=8);
i=0;
for (beta2 in beta2.vec)
{
for (sim in (1:nSims))
{
i=i+1;
res<- sim.fit.LMM(nCluster,nSubPerClust,sd.vec,c(beta0,beta1,beta2),times)
results[i,] <- c(beta2,coef(summary(res))[,1],c(as.data.frame(VarCorr(res))$sdcor),(coef(summary(res))[, 5][3]<0.05))
}
}
return(results);
}
results <- as.data.frame(power.analysis(nSims=50,nCluster=5,nSubPerClust=50,sd.vec=c(5,7,10),beta0=10,beta1=1,beta2.vec=c(seq(0,0.4,by=0.05)),times=c(seq(0,12,by=6))))
colnames(results) <- c("trueBeta2","estBeta0","estBeta1","estBeta1","cluster.sd","subject.sd","error.sd","rejectNull")
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
#pdf(file = "<need to put a path here>/<need to put a filename here>.pdf",
#    width = 6,
#    height = 4)
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
#dev.off()
require(lme4);
require(lmerTest);
sim.fit.LMM <- function(nCluster,nSubPerClust,sd.vec,beta.vec,times)
{
## create number of time points, number of observations, number of subjects total;
nTimes         = length(times);
nObsPerDataset = nCluster*nSubPerClust*nTimes;
nSubPerDataset = nCluster*nSubPerClust;
## generate covariate data;
int     = cbind(rep(1,nObsPerDataset))
time    = cbind(rep(times,nSubPerDataset))
trt     = cbind(c(rep(1,nObsPerDataset/2),rep(0,nObsPerDataset/2)))
trtTime = cbind(time*trt);
x       = cbind(int,time,trtTime)
## compute linear predictor (i.e., population mean);
linPred = x%*%beta.vec;
## generate cluster/subject IDs;
h = cbind(sort(rep(1:nCluster,nObsPerDataset/nCluster)));
b = cbind(sort(rep(1:nSubPerDataset,nTimes)))
## simulate random effects;
hr = rnorm(nCluster,mean=0,sd=sd.vec[1]);
hr = cbind(hr[h]);
br = rnorm(nSubPerDataset,mean=0,sd=sd.vec[2]);
br = cbind(br[b]);
er = cbind(rnorm(nObsPerDataset,mean=0,sd=sd.vec[3]));
## construct outcomes;
y = linPred + hr + br + er;
## fit model;
fit.sim <- lmer(y~time+trtTime+(1|h)+(1|b))
return(fit.sim);
}
power.analysis <- function(nSims,nCluster,nSubPerClust,sd.vec,beta0,beta1,beta2.vec,times)
{
results = matrix(NA,nrow=length(beta2.vec)*nSims,ncol=8);
i=0;
for (beta2 in beta2.vec)
{
for (sim in (1:nSims))
{
i=i+1;
res<- sim.fit.LMM(nCluster,nSubPerClust,sd.vec,c(beta0,beta1,beta2),times)
results[i,] <- c(beta2,coef(summary(res))[,1],c(as.data.frame(VarCorr(res))$sdcor),(coef(summary(res))[, 5][3]<0.05))
}
}
return(results);
}
## set seed;
set.seed(1);
## perform simulations;
results <- as.data.frame(power.analysis(nSims=50,nCluster=5,nSubPerClust=50,sd.vec=c(5,7,10),beta0=10,beta1=1,beta2.vec=c(seq(0,0.4,by=0.05)),times=c(seq(0,12,by=6))))
colnames(results) <- c("trueBeta2","estBeta0","estBeta1","estBeta1","cluster.sd","subject.sd","error.sd","rejectNull")
## summarize results;
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
## make graph;
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
nSubPerDataset <- 10;
nCluster <- 5;
nTimes <- 3;
nObsPerDataset <- 30;
h = cbind(sort(rep(1:nCluster,nObsPerDataset/nCluster)));
b = cbind(sort(rep(1:nSubPerDataset,nTimes)))
h
hr = rnorm(nCluster,mean=0,sd=1);
hr
cbind(hr[h]);
require(tidyverse);
require(lme3);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/SCHIZ")
require(tidyverse);
require(lme3);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/SCHIZ")
schiz = read.table("schiz.text",header=F)
require(tidyverse);
require(lme3);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/SCHIZ")
schiz = read.table("schiz.txt",header=F)
schiz
require(tidyverse);
require(lme3);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/SCHIZ")
schiz = read.table("schiz.txt",header=F)
colnames(lead)<-c("id", "y", "trt", "week");
schiz          <- read.table("schiz.txt",header=F)
colnames(schiz)<- c("id", "y", "trt", "week");
schiz           <- read.table("schiz.txt",header=F)
colnames(schiz) <- c("id", "y", "trt", "week");
schiz$sqrtWeek  <- sqrt(schiz$week)
require(tidyverse);
require(lme3);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/SCHIZ")
schiz           <- read.table("schiz.txt",header=F)
colnames(schiz) <- c("id", "y", "trt", "week");
schiz$sqrtWeek  <- sqrt(schiz$week)
schiz$modWorse  <- (schiz$y>=3)
require(tidyverse);
require(lme3);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/SCHIZ")
schiz           <- read.table("schiz.txt",header=F)
colnames(schiz) <- c("id", "y", "trt", "week");
schiz$sqrtWeek  <- sqrt(schiz$week)
schiz$modWorse  <- (schiz$y>=3)
## code to fit random intercept model;
r.int=glmer(modWorse~trt+sqrtWeek+trt:sqrtWeek+ (1|id),family=binomial,nAGQ=50)
summary(r.int);
require(tidyverse);
require(lme4);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/SCHIZ")
schiz           <- read.table("schiz.txt",header=F)
colnames(schiz) <- c("id", "y", "trt", "week");
schiz$sqrtWeek  <- sqrt(schiz$week)
schiz$modWorse  <- (schiz$y>=3)
## code to fit random intercept model;
r.int=glmer(modWorse~trt+sqrtWeek+trt:sqrtWeek+ (1|id),family=binomial,nAGQ=50)
summary(r.int);
r.int=glmer(modWorse~trt+sqrtWeek+trt:sqrtWeek+(1|id),data=schiz,family=binomial,nAGQ=50)
summary(r.int);
## code to fit random intercept model;
r.int=glmer(modWorse~trt+sqrtWeek+trt:sqrtWeek+(1|id),data=schiz,family=binomial,nAGQ=5)
summary(r.int);
## code to fit random slopes model;
r.slope <- glmer(modWorse~trt+sqrtWeek+trt:sqrtWeek+(1+sqrtWeek|id),data=schiz,family=binomial,nAGQ=5)
summary(r.slope);
## code to fit random slopes model;
r.slope <- glmer(modWorse~trt+sqrtWeek+trt:sqrtWeek+(1+sqrtWeek|id),data=schiz,family=binomial,nAGQ=5)
summary(r.slope);
require(tidyverse);
require(lme4);
require(GLMMAdaptive);
require(tidyverse);
require(lme4);
require(GLMMadaptive);
install.packages("GLMMadaptive")
r.slope2 <- mixed_model(
fixed = modWorse~trt+sqrtWeek+trt:sqrtWeek,
random = ~ 1+sqrtWeek|id,
data = schiz,
family = binomial
)
require(tidyverse);
require(lme4);
require(GLMMadaptive);
r.slope2 <- mixed_model(
fixed = modWorse~trt+sqrtWeek+trt:sqrtWeek,
random = ~ 1+sqrtWeek|id,
data = schiz,
family = binomial
)
summary(r.slope);
## code to fit random slopes model;
r.slope <- glmer(modWorse~trt+sqrtWeek+trt:sqrtWeek+(1+sqrtWeek|id),data=schiz,family=binomial,nAGQ=1)
summary(r.slope);
r.slope2 <- mixed_model(
fixed = modWorse~trt+sqrtWeek+trt:sqrtWeek,
random = ~ 1+sqrtWeek|id,
data = schiz,
family = binomial
)
summary(r.slope2);
## code to fit random slopes model;
r.slope <- glmer(modWorse~trt+sqrtWeek+trt:sqrtWeek+(1+sqrtWeek|id),data=schiz,family=binomial,nAGQ=1)
summary(r.slope);
r.slope2 <- mixed_model(
fixed = modWorse~trt+sqrtWeek+trt:sqrtWeek,
random = ~ 1+sqrtWeek|id,
data = schiz,
family = binomial
)
summary(r.slope2);
## code to fit random slopes model;
r.slope <- glmer(modWorse~trt+sqrtWeek+trt:sqrtWeek+(1+sqrtWeek|id),data=schiz,family=binomial,nAGQ=1)
summary(r.slope);
r.slope2 <- mixed_model(
fixed  = modWorse~trt+sqrtWeek+trt:sqrtWeek,
random = ~ 1+sqrtWeek|id,
data   = schiz,
family = binomial
)
summary(r.slope2);
## code to fit random slopes model;
r.slope2 <- mixed_model(
fixed  = modWorse~trt+sqrtWeek+trt:sqrtWeek,
random = ~ 1+sqrtWeek|id,
data   = schiz,
family = binomial,
control=(nAGQ=20)
)
summary(r.slope2);
t2      = seq(0,6,by=.1)
timevec = sqrt(t2)
probnull= rep(0,length(t2))
p=10
plot(t2,probnull,type='n',ylim=c(0,1),xlab='Weeks',
ylab='Probability',main='Subject-specific')
idsubsetplac=sample(idnew[txnew==0],p,replace=FALSE)
## code to fit random slopes model;
r.slope2 <- mixed_model(
fixed  = modWorse~trt+sqrtWeek+trt:sqrtWeek,
random = ~ 1+sqrtWeek|id,
data   = schiz,
family = binomial,
control=(nAGQ=5)
)
summary(r.slope2)
## code to make plots
attach(schiz)
t2      = seq(0,6,by=.1)
timevec = sqrt(t2)
probnull= rep(0,length(t2))
p=10
plot(t2,probnull,type='n',ylim=c(0,1),xlab='Weeks',ylab='Probability',main='Subject-specific')
idsubsetplac=sample(id[trt==0],p,replace=FALSE)
idsubsettrt=sample(id[trt==1],p,replace=FALSE)
t2      = seq(0,6,by=.1)
timevec = sqrt(t2)
probnull= rep(0,length(t2))
p=10
plot(t2,probnull,type='n',ylim=c(0,1),xlab='Weeks',ylab='Probability',main='Subject-specific')
idsubsetplac=sample(id[trt==0],p,replace=FALSE)
idsubsettrt=sample(id[trt==1],p,replace=FALSE)
xbplac=matrix(0,ncol=length(t2),nrow=10)
xbtrt=xbplac
probplac=matrix(0,ncol=length(t2),nrow=10)
probtrt=probplac
beta0=coef(rslope)$id[,1]
beta1=coef(rslope)$id[,3]
beta0=coef(r.slope2)$id[,1]
beta1=coef(r.slope2)$id[,3]
coef(r.slope2)
idnames=unique(id)
idnames
beta0
beta0
coef(r.slope2)
beta0=coef(r.slope2)[,1]
beta1=coef(r.slope2)[,3]
idnames=unique(id)
beta0
for (i in 1:p) {
xbplac[i,]=beta0[idnames==idsubsetplac[i]]+
beta1[idnames==idsubsetplac[i]]*timevec
probplac[i,]=exp(xbplac[i,])/(1+exp(xbplac[i,]))
lines(t2,probplac[i,],col=2)
xbtrt[i,]=beta0[idnames==idsubsettrt[i]]+fixef(rint)[2]+
(beta1[idnames==idsubsettrt[i]]+fixef(rint)[4])*timevec
probtrt[i,]=exp(xbtrt[i,])/(1+exp(xbtrt[i,]))
lines(t2,probtrt[i,],col=3)
}
legend(0,0.4,c('Plac','Trt'),col=c(2,3),lty=c(1,1))
fixef(r.slope2)
p=10
plot(t2,probnull,type='n',ylim=c(0,1),xlab='Weeks',ylab='Probability',main='Subject-specific')
idsubsetplac=sample(id[trt==0],p,replace=FALSE)
idsubsettrt=sample(id[trt==1],p,replace=FALSE)
xbplac=matrix(0,ncol=length(t2),nrow=10)
xbtrt =xbplac
probplac=matrix(0,ncol=length(t2),nrow=10)
probtrt =probplac
beta0=coef(r.slope2)[,1]
beta1=coef(r.slope2)[,3]
idnames=unique(id)
for (i in 1:p) {
xbplac[i,]=beta0[idnames==idsubsetplac[i]]+
beta1[idnames==idsubsetplac[i]]*timevec
probplac[i,]=exp(xbplac[i,])/(1+exp(xbplac[i,]))
lines(t2,probplac[i,],col=2)
xbtrt[i,]=beta0[idnames==idsubsettrt[i]]+fixef(r.slope2)[2]+
(beta1[idnames==idsubsettrt[i]]+fixef(r.slope2)[4])*timevec
probtrt[i,]=exp(xbtrt[i,])/(1+exp(xbtrt[i,]))
lines(t2,probtrt[i,],col=3)
}
legend(0,0.4,c('Plac','Trt'),col=c(2,3),lty=c(1,1))
p=10
plot(t2,probnull,type='n',ylim=c(0,1),xlab='Weeks',ylab='Probability',main='Subject-specific')
idsubsetplac=sample(id[trt==0],p,replace=FALSE)
idsubsettrt=sample(id[trt==1],p,replace=FALSE)
xbplac=matrix(0,ncol=length(t2),nrow=10)
xbtrt =xbplac
probplac=matrix(0,ncol=length(t2),nrow=10)
probtrt =probplac
beta0=coef(r.slope2)[,1]
beta1=coef(r.slope2)[,3]
idnames=unique(id)
for (i in 1:p)
{
xbplac[i,]   = beta0[idnames==idsubsetplac[i]]+beta1[idnames==idsubsetplac[i]]*timevec
probplac[i,] = exp(xbplac[i,])/(1+exp(xbplac[i,]))
lines(t2,probplac[i,],col=2)
xbtrt[i,]=beta0[idnames==idsubsettrt[i]]+fixef(r.slope2)[2]+(beta1[idnames==idsubsettrt[i]]+fixef(r.slope2)[4])*timevec
probtrt[i,]=exp(xbtrt[i,])/(1+exp(xbtrt[i,]))
lines(t2,probtrt[i,],col=3)
}
legend(0,0.2,c('Placebo','Trt'),col=c(2,3),lty=c(1,1))
p=10
plot(t2,probnull,type='n',ylim=c(0,1),xlab='Weeks',ylab='Probability',main='Subject-specific')
idsubsetplac=sample(id[trt==0],p,replace=FALSE)
idsubsettrt=sample(id[trt==1],p,replace=FALSE)
xbplac=matrix(0,ncol=length(t2),nrow=10)
xbtrt =xbplac
probplac=matrix(0,ncol=length(t2),nrow=10)
probtrt =probplac
beta0=coef(r.slope2)[,1]
beta1=coef(r.slope2)[,3]
idnames=unique(id)
for (i in 1:p)
{
xbplac[i,]   = beta0[idnames==idsubsetplac[i]]+beta1[idnames==idsubsetplac[i]]*timevec
probplac[i,] = exp(xbplac[i,])/(1+exp(xbplac[i,]))
lines(t2,probplac[i,],col=2)
xbtrt[i,]=beta0[idnames==idsubsettrt[i]]+fixef(r.slope2)[2]+(beta1[idnames==idsubsettrt[i]]+fixef(r.slope2)[4])*timevec
probtrt[i,]=exp(xbtrt[i,])/(1+exp(xbtrt[i,]))
lines(t2,probtrt[i,],col=3)
}
legend(0,0.0,c('Placebo','Trt'),col=c(2,3),lty=c(1,1))
p=10
plot(t2,probnull,type='n',ylim=c(0,1),xlab='Weeks',ylab='Probability',main='Subject-specific')
idsubsetplac=sample(id[trt==0],p,replace=FALSE)
idsubsettrt=sample(id[trt==1],p,replace=FALSE)
xbplac=matrix(0,ncol=length(t2),nrow=10)
xbtrt =xbplac
probplac=matrix(0,ncol=length(t2),nrow=10)
probtrt =probplac
beta0=coef(r.slope2)[,1]
beta1=coef(r.slope2)[,3]
idnames=unique(id)
for (i in 1:p)
{
xbplac[i,]   = beta0[idnames==idsubsetplac[i]]+beta1[idnames==idsubsetplac[i]]*timevec
probplac[i,] = exp(xbplac[i,])/(1+exp(xbplac[i,]))
lines(t2,probplac[i,],col=2)
xbtrt[i,]=beta0[idnames==idsubsettrt[i]]+fixef(r.slope2)[2]+(beta1[idnames==idsubsettrt[i]]+fixef(r.slope2)[4])*timevec
probtrt[i,]=exp(xbtrt[i,])/(1+exp(xbtrt[i,]))
lines(t2,probtrt[i,],col=3)
}
legend(0,0.1,c('Placebo','Trt'),col=c(2,3),lty=c(1,1))
## Code to Subject-Specific Plots
attach(schiz)
t2      = seq(0,6,by=.1)
timevec = sqrt(t2)
probnull= rep(0,length(t2))
p=10
plot(t2,probnull,type='n',ylim=c(0,1),xlab='Weeks',ylab='Probability',main='Subject-specific Trajectories')
idsubsetplac=sample(id[trt==0],p,replace=FALSE)
idsubsettrt=sample(id[trt==1],p,replace=FALSE)
xbplac=matrix(0,ncol=length(t2),nrow=10)
xbtrt =xbplac
probplac=matrix(0,ncol=length(t2),nrow=10)
probtrt =probplac
beta0=coef(r.slope2)[,1]
beta1=coef(r.slope2)[,3]
idnames=unique(id)
for (i in 1:p)
{
xbplac[i,]   = beta0[idnames==idsubsetplac[i]]+beta1[idnames==idsubsetplac[i]]*timevec
probplac[i,] = exp(xbplac[i,])/(1+exp(xbplac[i,]))
lines(t2,probplac[i,],col=2)
xbtrt[i,]=beta0[idnames==idsubsettrt[i]]+fixef(r.slope2)[2]+(beta1[idnames==idsubsettrt[i]]+fixef(r.slope2)[4])*timevec
probtrt[i,]=exp(xbtrt[i,])/(1+exp(xbtrt[i,]))
lines(t2,probtrt[i,],col=3)
}
legend(0,0.1,c('Placebo','Trt'),col=c(2,3),lty=c(1,1))
p=10
plot(t2,probnull,type='n',ylim=c(0,1),xlab='Weeks',ylab='Probability',main='Subject-specific Trajectories')
idsubsetplac=sample(id[trt==0],p,replace=FALSE)
idsubsettrt=sample(id[trt==1],p,replace=FALSE)
xbplac=matrix(0,ncol=length(t2),nrow=10)
xbtrt =xbplac
probplac=matrix(0,ncol=length(t2),nrow=10)
probtrt =probplac
beta0=coef(r.slope2)[,1]
beta1=coef(r.slope2)[,3]
idnames=unique(id)
for (i in 1:p)
{
xbplac[i,]   = beta0[idnames==idsubsetplac[i]]+beta1[idnames==idsubsetplac[i]]*timevec
probplac[i,] = exp(xbplac[i,])/(1+exp(xbplac[i,]))
lines(t2,probplac[i,],col=1)
xbtrt[i,]=beta0[idnames==idsubsettrt[i]]+fixef(r.slope2)[2]+(beta1[idnames==idsubsettrt[i]]+fixef(r.slope2)[4])*timevec
probtrt[i,]=exp(xbtrt[i,])/(1+exp(xbtrt[i,]))
lines(t2,probtrt[i,],col=3)
}
legend(0,0.1,c('Placebo','Trt'),col=c(2,3),lty=c(1,1))
p=10
plot(t2,probnull,type='n',ylim=c(0,1),xlab='Weeks',ylab='Probability',main='Subject-specific Trajectories')
idsubsetplac=sample(id[trt==0],p,replace=FALSE)
idsubsettrt=sample(id[trt==1],p,replace=FALSE)
xbplac=matrix(0,ncol=length(t2),nrow=10)
xbtrt =xbplac
probplac=matrix(0,ncol=length(t2),nrow=10)
probtrt =probplac
beta0=coef(r.slope2)[,1]
beta1=coef(r.slope2)[,3]
idnames=unique(id)
for (i in 1:p)
{
xbplac[i,]   = beta0[idnames==idsubsetplac[i]]+beta1[idnames==idsubsetplac[i]]*timevec
probplac[i,] = exp(xbplac[i,])/(1+exp(xbplac[i,]))
lines(t2,probplac[i,],col=1)
xbtrt[i,]=beta0[idnames==idsubsettrt[i]]+fixef(r.slope2)[2]+(beta1[idnames==idsubsettrt[i]]+fixef(r.slope2)[4])*timevec
probtrt[i,]=exp(xbtrt[i,])/(1+exp(xbtrt[i,]))
lines(t2,probtrt[i,],col=3)
}
legend(0,0.1,c('Placebo','Trt'),col=c(1,3),lty=c(1,1))
summary(r.slope2)
