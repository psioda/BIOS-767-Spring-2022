require(tidyverse);
require(geepack);
setwd("C:/Users/psioda/Documents/GitHub/bios-courses/BIOS-767/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week     <- as.numeric(lead_vert$week)
lead_vert$lowLead  <- ifelse(lead_vert$bloodLead<20,1,0)
lead_vert$succimer <- ifelse(lead_vert$trt=="A",1,0)
lead_vert          <- lead_vert %>% filter(week>0)
head(lead_vert)
### GEE Analysis
gee.fit=geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
summary(gee.fit)
gee.fit2 =geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week,std.err="fij")
summary(gee.fit2)
coef(gee.fit2)
vcov(gee.fit2)
summary(gee.fit2)
coef(summary(gee.fit2))
predict(gee.fit2)
predict(gee.fit2,se.fit = TRUE)
ndata <- lead_vert;
predict(gee.fit2,ndata,se.fit = TRUE)
anova(gee.fit2)
anova(gee.fit,lead_vert)
predict(gee.fit2,lead_vert)
predict(gee.fit2,lead_vert)
predict(gee.fit2,lead_vert,type = "link", se.fit = TRUE)
predict(gee.fit2,lead_vert,type = "link")
anova(gee.fit2,gee.fit1)
require(tidyverse);
require(geepack);
setwd("C:/Users/psioda/Documents/GitHub/bios-courses/BIOS-767/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week     <- as.numeric(lead_vert$week)
lead_vert$lowLead  <- ifelse(lead_vert$bloodLead<20,1,0)
lead_vert$succimer <- ifelse(lead_vert$trt=="A",1,0)
lead_vert          <- lead_vert %>% filter(week>0)
head(lead_vert)
### GEE Analysis
gee.fit=geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
summary(gee.fit)
gee.fit2 =geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week,std.err="fij")
summary(gee.fit2)
anova(gee.fit2,gee.fit1)
anova(gee.fit2,gee.fit)
gee.fit2 =geeglm( lowLead~succimer+week,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week,std.err="fij")
summary(gee.fit2)
anova(gee.fit2,gee.fit)
gee.fit2 =geeglm( lowLead~succimer+week,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week,std.err="fij")
summary(gee.fit2)
anova(gee.fit2,gee.fit)
coef(gee.fit2)
require(tidyverse);
require(geepack);
setwd("C:/Users/psioda/Documents/GitHub/bios-courses/BIOS-767/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week     <- as.numeric(lead_vert$week)
lead_vert$lowLead  <- ifelse(lead_vert$bloodLead<20,1,0)
lead_vert$succimer <- ifelse(lead_vert$trt=="A",1,0)
lead_vert          <- lead_vert %>% filter(week>0)
head(lead_vert)
### GEE Analysis
gee.fit=geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
summary(gee.fit)
gee.fit2 =geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week,std.err="fij")
summary(gee.fit2)
coef(gee.fit2)
vcov(gee.fit2)
summary(gee.fit2)
coef(summary(gee.fit2))
predict(gee.fit2,lead_vert,type = "link")
coef(gee.fit2)
vcov(gee.fit2)
coef(summary(gee.fit2))
# Now obtain estimates
dat = cbind(1,lead_vert$succimer,lead_vert$week,lead_vert$succimer*lead_vert$week)
dat
# Now obtain estimates
dat = unique(cbind(1,lead_vert$succimer,lead_vert$week,lead_vert$succimer*lead_vert$week))
dat
L.Beta <- Beta %*% L.Beta
# Now obtain estimates
L      <- unique(cbind(1,lead_vert$succimer,lead_vert$week,lead_vert$succimer*lead_vert$week))
Beta   <- coef(gee.fit2)
L.Beta <- Beta %*% L.Beta
# Now obtain estimates
L       <- unique(cbind(1,lead_vert$succimer,lead_vert$week,lead_vert$succimer*lead_vert$week))
Beta    <- coef(gee.fit2)
L.Beta  <- L %*% Beta
SE.Beta <- diag(L %*% vcov(gee.fit2) %*% t(L))
SE.Beta
# Now obtain estimates
logistic <- function(x) { exp(x)/(1+exp(x)) }
L       <- unique(cbind(1,lead_vert$succimer,lead_vert$week,lead_vert$succimer*lead_vert$week))
Beta    <- coef(gee.fit2)
L.Beta  <- L %*% Beta
SE.Beta <- sqrt(diag(L %*% vcov(gee.fit2) %*% t(L)))
L.Beta.Lower <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L.Beta.Upper <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L       <- unique(cbind(1,lead_vert$succimer,lead_vert$week,lead_vert$succimer*lead_vert$week))
Beta    <- coef(gee.fit2)
L.Beta  <- L %*% Beta
SE.Beta <- sqrt(diag(L %*% vcov(gee.fit2) %*% t(L)))
L.Beta.Lower <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L.Beta.Upper <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
results      <- data.frame(trt = lead_vert$succimer, week = lead_vert$week, Beta.Hat = Beta)
L.Beta.Lower <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L.Beta.Upper <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
results      <- data.frame('trt' = lead_vert$succimer, 'week' = lead_vert$week, 'beta.hat' = Beta)
results
results      <- data.frame(L = L, 'beta.hat' = Beta)
results      <- data.frame(L = L, 'Estimate' = L.Beta)
## table;
library(knitr)
kable(r, format, digits = 3)
## table;
library(knitr)
kable(results, format, digits = 3)
# Now obtain estimates
logistic <- function(x) { exp(x)/(1+exp(x)) }
L       <- unique(cbind(1,lead_vert$succimer,lead_vert$week,lead_vert$succimer*lead_vert$week))
Beta    <- coef(gee.fit2)
L.Beta  <- L %*% Beta
SE.Beta <- sqrt(diag(L %*% vcov(gee.fit2) %*% t(L)))
L.Beta.Lower <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L.Beta.Upper <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
results      <- data.frame(L = L, 'Estimate' = L.Beta)
## table;
library(knitr)
kable(results)
results      <- data.frame(L = L, 'Estimate' = L.Beta, "Lower.CI" = L.Beta.Lower, 'Upper.CI' = L.Beta.Upper)
## table;
library(knitr)
kable(results)
L.Beta.Lower <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L.Beta.Upper <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
results      <- data.frame(L = L, 'Estimate' = logistic(L.Beta), "Lower.CI" = L.Beta.Lower, 'Upper.CI' = L.Beta.Upper)
results
# Now obtain estimates
logistic <- function(x) { exp(x)/(1+exp(x)) }
## note that quantities are estimated on the linear predictor scale and
## transformed to the probability scale.
L       <- unique(cbind(1,lead_vert$succimer,lead_vert$week,lead_vert$succimer*lead_vert$week))
Beta    <- coef(gee.fit2)
L.Beta  <- L %*% Beta
SE.Beta <- sqrt(diag(L %*% vcov(gee.fit2) %*% t(L)))
L.Prob.Lower <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L.Prob.Upper <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L.Prob       <- logistic(L.Beta)
Results      <- data.frame(L = L, 'Estimate' = L.Prob, "Lower.CI" = L.Prob.Lower, 'Upper.CI' = L.Prob.Upper)
## table;
library(knitr)
kable(Results)
## create and print data frame of results
library(knitr)
Results      <- data.frame(L = L, 'Estimate' = L.Prob, "Lower.CI" = L.Prob.Lower, 'Upper.CI' = L.Prob.Upper)
kable(Results)
# Now obtain estimates
logistic <- function(x) { exp(x)/(1+exp(x)) }
## note that quantities are estimated on the linear predictor scale and
## transformed to the probability scale.
L       <- unique(cbind(1,lead_vert$succimer,lead_vert$week,lead_vert$succimer*lead_vert$week))
Beta    <- coef(gee.fit)
L.Beta  <- L %*% Beta
SE.Beta <- sqrt(diag(L %*% vcov(gee.fit) %*% t(L)))
## compute transformed results on probability scale
L.Prob.Lower <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L.Prob.Upper <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L.Prob       <- logistic(L.Beta)
## create and print data frame of results
library(knitr)
Results      <- data.frame(L = L, 'Estimate' = L.Prob, "Lower.CI" = L.Prob.Lower, 'Upper.CI' = L.Prob.Upper)
kable(Results)
# Now obtain estimates
logistic <- function(x) { exp(x)/(1+exp(x)) }
## note that quantities are estimated on the linear predictor scale and
## transformed to the probability scale.
L       <- unique(cbind(1,lead_vert$succimer,lead_vert$week,lead_vert$succimer*lead_vert$week))
Beta    <- coef(gee.fit)
L.Beta  <- L %*% Beta
SE.Beta <- sqrt(diag(L %*% vcov(gee.fit) %*% t(L)))
## compute transformed results on probability scale
L.Prob.Lower <- logistic(L.Beta - qnorm(0.975)*SE.Beta)
L.Prob.Upper <- logistic(L.Beta + qnorm(0.975)*SE.Beta)
L.Prob       <- logistic(L.Beta)
## create and print data frame of results
library(knitr)
Results      <- data.frame(L = L, 'Estimate' = L.Prob, "Lower.CI" = L.Prob.Lower, 'Upper.CI' = L.Prob.Upper)
kable(Results)
### GEE Analysis
gee.fit=geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
## summary method output
summary(gee.fit)
1.0749^2
### GEE Analysis - empirical standard errors
gee.fit=geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
## summary method output
summary(gee.fit)
### GEE Analysis - fully iterated jack-knife standard errors
gee.fit2 =geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week,std.err="fij")
## some functions to extract GEE output;
summary(gee.fit2)
coef(gee.fit2)
vcov(gee.fit2)
coef(summary(gee.fit2))
## Wald test of interaction
L2      <- c(0,0,0,1)
L2.Beta <- L2 %*% Beta
L2.Cov  <- L2 %*% vcov(gee.fit) %*% t(L2)
Beta
L2      <- c(0,0,0,1)
L2.Beta <- L2 %*% Beta
L2.Beta
vcov(gee.fit)
L2
L2 %*% vcov(gee.fit)
t(L2)
L2 %*% vcov(gee.fit) %*% L2
rbind(c(0,0,0,1))
L2 %*% vcov(gee.fit) %*% t(L2)
## Wald test of interaction
L2      <- rbind(c(0,0,0,1))
L2.Beta <- L2 %*% Beta
L2.Cov  <- L2 %*% vcov(gee.fit) %*% t(L2)
L2.Cov
## Wald test of interaction
L2       <- rbind(c(0,0,0,1))
L2.Beta  <- L2 %*% Beta
L2.Cov   <- L2 %*% vcov(gee.fit) %*% t(L2)
wald.csq <- L2.Beta %*% solve(L2.Cov) %*% L2.Beta
wald.csq
## Wald test of interaction
L2       <- rbind(c(0,0,0,1))
L2.Beta  <- L2 %*% Beta
L2.Cov   <- L2 %*% vcov(gee.fit) %*% t(L2)
Wald.csq <- L2.Beta %*% solve(L2.Cov) %*% L2.Beta
### GEE Analysis - empirical standard errors
gee.fit=geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
## summary method output
summary(gee.fit)
## Wald test of interaction
L2       <- rbind(c(0,0,0,1))
L2.Beta  <- L2 %*% Beta
L2.Cov   <- L2 %*% vcov(gee.fit) %*% t(L2)
Wald.csq <- L2.Beta %*% solve(L2.Cov) %*% L2.Beta
Wald.csq
Wald.pv  <- pchi(Wald.csq,1,lower.tail=FALSE)
require(tidyverse);
require(geepack);
require(stats);
## Wald test of interaction
L2       <- rbind(c(0,0,0,1))
L2.Beta  <- L2 %*% Beta
L2.Cov   <- L2 %*% vcov(gee.fit) %*% t(L2)
Wald.csq <- L2.Beta %*% solve(L2.Cov) %*% L2.Beta
Wald.pv  <- pchi(Wald.csq,1,lower.tail=FALSE)
require(stats);
require(tidyverse);
require(geepack);
require(stats);
require(knitr);
## Wald test of interaction
L2       <- rbind(c(0,0,0,1))
L2.Beta  <- L2 %*% Beta
L2.Cov   <- L2 %*% vcov(gee.fit) %*% t(L2)
Wald.csq <- L2.Beta %*% solve(L2.Cov) %*% L2.Beta
Wald.pv  <- pchi(Wald.csq,1,lower.tail=FALSE)
## Wald test of interaction
L2       <- rbind(c(0,0,0,1))
L2.Beta  <- L2 %*% Beta
L2.Cov   <- L2 %*% vcov(gee.fit) %*% t(L2)
Wald.csq <- L2.Beta %*% solve(L2.Cov) %*% L2.Beta
Wald.pv  <- pchisq(Wald.csq,1,lower.tail=FALSE)
Wald.pv
## LRT for interaction
### GEE Analysis - empirical standard errors
gee.fit.full = geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
gee.fit.redu = geeglm( lowLead~succimer+week,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
gee.fit.redu
anova(gee.fit.full,gee.fit.redu)
## LRT for interaction
### GEE Analysis - empirical standard errors
gee.fit.full = geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
gee.fit.redu = geeglm( lowLead~succimer+week,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
anova(gee.fit.full,gee.fit.redu)
anova(gee.fit.redu,gee.fit.full)
anova(gee.fit.full)
## LRT for interaction
anova(gee.fit)
Wald.pv
Wald.csq
