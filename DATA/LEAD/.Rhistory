summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
plot(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
loess.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
results <- as.data.frame(power.analysis(nSims=1000,nCluster=5,nSubPerClust=100,sd.vec=c(5.814,8.222,8.222),beta0=50,beta1=0.01667,beta2.vec=c(0,seq(0.1,0.3,by=0.02)),times=c(0,6,12)))
results
results <- as.data.frame(power.analysis(nSims=1000,nCluster=5,nSubPerClust=100,sd.vec=c(5.814,8.222,8.222),beta0=50,beta1=0.01667,beta2.vec=c(0,seq(0.1,0.3,by=0.02)),times=c(0,6,12)))
colnames(results) <- c("trueBeta2","estBeta0","estBeta1","estBeta1","cluster.sd","subject.sd","error.sd","rejectNull")
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
require(lme4);
require(lmerTest);
sim.fit.LMM <- function(nCluster,nSubPerClust,sd.vec,beta.vec,times)
{
## create number of time points, number of observations, number of subjects total;
nTimes         = length(times);
nObsPerDataset = nCluster*nSubPerClust*nTimes;
nSubPerDataset = nCluster*nSubPerClust;
## generate covariate data;
int     = cbind(rep(1,nObsPerDataset))
time    = cbind(rep(times,nSubPerDataset))
trt     = cbind(c(rep(1,nObsPerDataset/2),rep(0,nObsPerDataset/2)))
trtTime = cbind(time*trt);
x       = cbind(int,time,trtTime)
## compute linear predictor (i.e., population mean);
linPred = x%*%beta.vec;
## generate cluster/subject IDs;
h = cbind(sort(rep(1:nCluster,nObsPerDataset/nCluster)));
b = cbind(sort(rep(1:nSubPerDataset,nTimes)))
## simulate random effects;
hr = rnorm(nCluster,mean=0,sd=sd.vec[1]);
hr = cbind(hr[h]);
br = rnorm(nSubPerDataset,mean=0,sd=sd.vec[2]);
br = cbind(br[b]);
er = cbind(rnorm(nObsPerDataset,mean=0,sd=sd.vec[3]));
## construct outcomes;
y = linPred + hr + br + er;
## fit model;
fit.sim <- lmer(y~time+trtTime+(1|h)+(1|b))
return(fit.sim);
}
power.analysis <- function(nSims,nCluster,nSubPerClust,sd.vec,beta0,beta1,beta2.vec,times)
{
results = matrix(NA,nrow=length(beta2.vec)*nSims,ncol=8);
i=0;
for (beta2 in beta2.vec)
{
for (sim in (1:nSims))
{
i=i+1;
res<- sim.fit.LMM(nCluster,nSubPerClust,sd.vec,c(beta0,beta1,beta2),times)
results[i,] <- c(beta2,coef(summary(res))[,1],c(as.data.frame(VarCorr(res))$sdcor),(coef(summary(res))[, 5][3]<0.05))
}
}
return(results);
}
results <- as.data.frame(power.analysis(nSims=20,nCluster=5,nSubPerClust=100,sd.vec=c(5.814,8.222,8.222),beta0=50,beta1=0.01667,beta2.vec=c(seq(0.0,0.3,by=0.05)),times=c(0,6,12)))
colnames(results) <- c("trueBeta2","estBeta0","estBeta1","estBeta1","cluster.sd","subject.sd","error.sd","rejectNull")
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
pdf(file = "C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/99-HOMEWORK/HW4/OUTPUT/My Plot.pdf",
width = 6,
height = 4)
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
dev.off()
require(lme4);
require(lmerTest);
sim.fit.LMM <- function(nCluster,nSubPerClust,sd.vec,beta.vec,times)
{
## create number of time points, number of observations, number of subjects total;
nTimes         = length(times);
nObsPerDataset = nCluster*nSubPerClust*nTimes;
nSubPerDataset = nCluster*nSubPerClust;
## generate covariate data;
int     = cbind(rep(1,nObsPerDataset))
time    = cbind(rep(times,nSubPerDataset))
trt     = cbind(c(rep(1,nObsPerDataset/2),rep(0,nObsPerDataset/2)))
trtTime = cbind(time*trt);
x       = cbind(int,time,trtTime)
## compute linear predictor (i.e., population mean);
linPred = x%*%beta.vec;
## generate cluster/subject IDs;
h = cbind(sort(rep(1:nCluster,nObsPerDataset/nCluster)));
b = cbind(sort(rep(1:nSubPerDataset,nTimes)))
## simulate random effects;
hr = rnorm(nCluster,mean=0,sd=sd.vec[1]);
hr = cbind(hr[h]);
br = rnorm(nSubPerDataset,mean=0,sd=sd.vec[2]);
br = cbind(br[b]);
er = cbind(rnorm(nObsPerDataset,mean=0,sd=sd.vec[3]));
## construct outcomes;
y = linPred + hr + br + er;
## fit model;
fit.sim <- lmer(y~time+trtTime+(1|h)+(1|b))
return(fit.sim);
}
power.analysis <- function(nSims,nCluster,nSubPerClust,sd.vec,beta0,beta1,beta2.vec,times)
{
results = matrix(NA,nrow=length(beta2.vec)*nSims,ncol=8);
i=0;
for (beta2 in beta2.vec)
{
for (sim in (1:nSims))
{
i=i+1;
res<- sim.fit.LMM(nCluster,nSubPerClust,sd.vec,c(beta0,beta1,beta2),times)
results[i,] <- c(beta2,coef(summary(res))[,1],c(as.data.frame(VarCorr(res))$sdcor),(coef(summary(res))[, 5][3]<0.05))
}
}
return(results);
}
results <- as.data.frame(power.analysis(nSims=10,nCluster=5,nSubPerClust=50,sd.vec=c(10,10,10),beta0=10,beta1=1,beta2.vec=c(seq(0,2,by=0.5)),times=c(seq(0,12,by=6))))
colnames(results) <- c("trueBeta2","estBeta0","estBeta1","estBeta1","cluster.sd","subject.sd","error.sd","rejectNull")
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
#pdf(file = "<need to put a path here>/<need to put a filename here>.pdf",
#    width = 6,
#    height = 4)
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
#dev.off()
summary.results
require(lme4);
require(lmerTest);
sim.fit.LMM <- function(nCluster,nSubPerClust,sd.vec,beta.vec,times)
{
## create number of time points, number of observations, number of subjects total;
nTimes         = length(times);
nObsPerDataset = nCluster*nSubPerClust*nTimes;
nSubPerDataset = nCluster*nSubPerClust;
## generate covariate data;
int     = cbind(rep(1,nObsPerDataset))
time    = cbind(rep(times,nSubPerDataset))
trt     = cbind(c(rep(1,nObsPerDataset/2),rep(0,nObsPerDataset/2)))
trtTime = cbind(time*trt);
x       = cbind(int,time,trtTime)
## compute linear predictor (i.e., population mean);
linPred = x%*%beta.vec;
## generate cluster/subject IDs;
h = cbind(sort(rep(1:nCluster,nObsPerDataset/nCluster)));
b = cbind(sort(rep(1:nSubPerDataset,nTimes)))
## simulate random effects;
hr = rnorm(nCluster,mean=0,sd=sd.vec[1]);
hr = cbind(hr[h]);
br = rnorm(nSubPerDataset,mean=0,sd=sd.vec[2]);
br = cbind(br[b]);
er = cbind(rnorm(nObsPerDataset,mean=0,sd=sd.vec[3]));
## construct outcomes;
y = linPred + hr + br + er;
## fit model;
fit.sim <- lmer(y~time+trtTime+(1|h)+(1|b))
return(fit.sim);
}
power.analysis <- function(nSims,nCluster,nSubPerClust,sd.vec,beta0,beta1,beta2.vec,times)
{
results = matrix(NA,nrow=length(beta2.vec)*nSims,ncol=8);
i=0;
for (beta2 in beta2.vec)
{
for (sim in (1:nSims))
{
i=i+1;
res<- sim.fit.LMM(nCluster,nSubPerClust,sd.vec,c(beta0,beta1,beta2),times)
results[i,] <- c(beta2,coef(summary(res))[,1],c(as.data.frame(VarCorr(res))$sdcor),(coef(summary(res))[, 5][3]<0.05))
}
}
return(results);
}
results <- as.data.frame(power.analysis(nSims=50,nCluster=5,nSubPerClust=50,sd.vec=c(10,10,10),beta0=10,beta1=1,beta2.vec=c(seq(0,1,by=0.2)),times=c(seq(0,12,by=6))))
colnames(results) <- c("trueBeta2","estBeta0","estBeta1","estBeta1","cluster.sd","subject.sd","error.sd","rejectNull")
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
#pdf(file = "<need to put a path here>/<need to put a filename here>.pdf",
#    width = 6,
#    height = 4)
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
#dev.off()
require(lme4);
require(lmerTest);
sim.fit.LMM <- function(nCluster,nSubPerClust,sd.vec,beta.vec,times)
{
## create number of time points, number of observations, number of subjects total;
nTimes         = length(times);
nObsPerDataset = nCluster*nSubPerClust*nTimes;
nSubPerDataset = nCluster*nSubPerClust;
## generate covariate data;
int     = cbind(rep(1,nObsPerDataset))
time    = cbind(rep(times,nSubPerDataset))
trt     = cbind(c(rep(1,nObsPerDataset/2),rep(0,nObsPerDataset/2)))
trtTime = cbind(time*trt);
x       = cbind(int,time,trtTime)
## compute linear predictor (i.e., population mean);
linPred = x%*%beta.vec;
## generate cluster/subject IDs;
h = cbind(sort(rep(1:nCluster,nObsPerDataset/nCluster)));
b = cbind(sort(rep(1:nSubPerDataset,nTimes)))
## simulate random effects;
hr = rnorm(nCluster,mean=0,sd=sd.vec[1]);
hr = cbind(hr[h]);
br = rnorm(nSubPerDataset,mean=0,sd=sd.vec[2]);
br = cbind(br[b]);
er = cbind(rnorm(nObsPerDataset,mean=0,sd=sd.vec[3]));
## construct outcomes;
y = linPred + hr + br + er;
## fit model;
fit.sim <- lmer(y~time+trtTime+(1|h)+(1|b))
return(fit.sim);
}
power.analysis <- function(nSims,nCluster,nSubPerClust,sd.vec,beta0,beta1,beta2.vec,times)
{
results = matrix(NA,nrow=length(beta2.vec)*nSims,ncol=8);
i=0;
for (beta2 in beta2.vec)
{
for (sim in (1:nSims))
{
i=i+1;
res<- sim.fit.LMM(nCluster,nSubPerClust,sd.vec,c(beta0,beta1,beta2),times)
results[i,] <- c(beta2,coef(summary(res))[,1],c(as.data.frame(VarCorr(res))$sdcor),(coef(summary(res))[, 5][3]<0.05))
}
}
return(results);
}
results <- as.data.frame(power.analysis(nSims=50,nCluster=5,nSubPerClust=50,sd.vec=c(5,7,10),beta0=10,beta1=1,beta2.vec=c(seq(0,0.4,by=0.05)),times=c(seq(0,12,by=6))))
colnames(results) <- c("trueBeta2","estBeta0","estBeta1","estBeta1","cluster.sd","subject.sd","error.sd","rejectNull")
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
#pdf(file = "<need to put a path here>/<need to put a filename here>.pdf",
#    width = 6,
#    height = 4)
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
#dev.off()
require(lme4);
require(lmerTest);
sim.fit.LMM <- function(nCluster,nSubPerClust,sd.vec,beta.vec,times)
{
## create number of time points, number of observations, number of subjects total;
nTimes         = length(times);
nObsPerDataset = nCluster*nSubPerClust*nTimes;
nSubPerDataset = nCluster*nSubPerClust;
## generate covariate data;
int     = cbind(rep(1,nObsPerDataset))
time    = cbind(rep(times,nSubPerDataset))
trt     = cbind(c(rep(1,nObsPerDataset/2),rep(0,nObsPerDataset/2)))
trtTime = cbind(time*trt);
x       = cbind(int,time,trtTime)
## compute linear predictor (i.e., population mean);
linPred = x%*%beta.vec;
## generate cluster/subject IDs;
h = cbind(sort(rep(1:nCluster,nObsPerDataset/nCluster)));
b = cbind(sort(rep(1:nSubPerDataset,nTimes)))
## simulate random effects;
hr = rnorm(nCluster,mean=0,sd=sd.vec[1]);
hr = cbind(hr[h]);
br = rnorm(nSubPerDataset,mean=0,sd=sd.vec[2]);
br = cbind(br[b]);
er = cbind(rnorm(nObsPerDataset,mean=0,sd=sd.vec[3]));
## construct outcomes;
y = linPred + hr + br + er;
## fit model;
fit.sim <- lmer(y~time+trtTime+(1|h)+(1|b))
return(fit.sim);
}
power.analysis <- function(nSims,nCluster,nSubPerClust,sd.vec,beta0,beta1,beta2.vec,times)
{
results = matrix(NA,nrow=length(beta2.vec)*nSims,ncol=8);
i=0;
for (beta2 in beta2.vec)
{
for (sim in (1:nSims))
{
i=i+1;
res<- sim.fit.LMM(nCluster,nSubPerClust,sd.vec,c(beta0,beta1,beta2),times)
results[i,] <- c(beta2,coef(summary(res))[,1],c(as.data.frame(VarCorr(res))$sdcor),(coef(summary(res))[, 5][3]<0.05))
}
}
return(results);
}
## set seed;
set.seed(1);
## perform simulations;
results <- as.data.frame(power.analysis(nSims=50,nCluster=5,nSubPerClust=50,sd.vec=c(5,7,10),beta0=10,beta1=1,beta2.vec=c(seq(0,0.4,by=0.05)),times=c(seq(0,12,by=6))))
colnames(results) <- c("trueBeta2","estBeta0","estBeta1","estBeta1","cluster.sd","subject.sd","error.sd","rejectNull")
## summarize results;
summary.results <- aggregate(results[,2:8],list(true.value = results$trueBeta2),mean)
## make graph;
scatter.smooth(summary.results$true.value,summary.results$rejectNull)
abline(h=c(0.05,0.80))
install.packages("geepack")
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("lead-data.txt",header=F,sep=",")
colnames(dental)<-c("id","trt","week0","week1","week4","week6");
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("lead-data.txt",header=F,sep=" ")
colnames(dental)<-c("id","trt","week0","week1","week4","week6");
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F,sep=" ")
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F,sep="tab")
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F,sep="\t")
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
lead
lead = read.table("tlc-data.txt",header=F,sep=" ")
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
lead
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
head(lead_vert)
ifelse(lead_vert$bloodLead<20)
ifelse(lead_vert$bloodLead<20,1,0)
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week <- as.numeric(lead_vert$week)
lead_vert$lowLead <- ifelse(lead_vert$bloodLead<20,1,0)
head(lead_vert)
lead_vert %>% filter(week>0)
lead_vert
lead_vert <- lead_vert %>% filter(week>0)
lead_vert
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week    <- as.numeric(lead_vert$week)
lead_vert$lowLead <- ifelse(lead_vert$bloodLead<20,1,0)
lead_vert         <- lead_vert %>% filter(week>0)
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week    <- as.numeric(lead_vert$week)
lead_vert$lowLead <- ifelse(lead_vert$bloodLead<20,1,0)
lead_vert         <- lead_vert %>% filter(week>0)
head(lead_vert)
### GEE Analysis
m1=geeglm(lowLead~trt+week+week:trt,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable")
m1
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week     <- as.numeric(lead_vert$week)
lead_vert$lowLead  <- ifelse(lead_vert$bloodLead<20,1,0)
lead_vert$succimer <- ifelse(lead_vert$trt=="A",1,0)
lead_vert          <- lead_vert %>% filter(week>0)
head(lead_vert)
### GEE Analysis
m1=geeglm(lowLead~trt+week+week:trt,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable")
library(tidyverse);
library(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week     <- as.numeric(lead_vert$week)
lead_vert$lowLead  <- ifelse(lead_vert$bloodLead<20,1,0)
lead_vert$succimer <- ifelse(lead_vert$trt=="A",1,0)
lead_vert          <- lead_vert %>% filter(week>0)
head(lead_vert)
### GEE Analysis
m1=geeglm(lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable")
m1
require(tidyverse);
require(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week     <- as.numeric(lead_vert$week)
lead_vert$lowLead  <- ifelse(lead_vert$bloodLead<20,1,0)
lead_vert$succimer <- ifelse(lead_vert$trt=="A",1,0)
lead_vert          <- lead_vert %>% filter(week>0)
head(lead_vert)
### GEE Analysis
gee.fit=geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable")
require(tidyverse);
require(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week     <- as.numeric(lead_vert$week)
lead_vert$lowLead  <- ifelse(lead_vert$bloodLead<20,1,0)
lead_vert$succimer <- ifelse(lead_vert$trt=="A",1,0)
lead_vert          <- lead_vert %>% filter(week>0)
head(lead_vert)
### GEE Analysis
gee.fit=geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week)
require(tidyverse);
require(geepack);
setwd("C:/Users/psioda/Documents/GitHub/BIOS-767-Programming/DATA/LEAD");
lead = read.table("tlc-data.txt",header=F)
colnames(lead)<-c("id","trt","week0","week1","week4","week6");
## transform data;
lead_vert <- as_tibble(lead) %>%
tidyr::pivot_longer(
cols = starts_with("week"),
names_to = "week",
values_to = "bloodLead",
names_prefix = "week")
lead_vert$week     <- as.numeric(lead_vert$week)
lead_vert$lowLead  <- ifelse(lead_vert$bloodLead<20,1,0)
lead_vert$succimer <- ifelse(lead_vert$trt=="A",1,0)
lead_vert          <- lead_vert %>% filter(week>0)
head(lead_vert)
### GEE Analysis
gee.fit=geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week);
summary(gee.fit);
gee.fit2 =geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week,std.err="jack")
gee.fit2 =geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week,std.err="jack")
summary(gee.fit2)
gee.fit2 =geeglm( lowLead~succimer+week+week:succimer,
data=lead_vert, id=id, family=binomial(logit),
corstr="exchangeable",waves=week,std.err="fij")
summary(gee.fit2)
